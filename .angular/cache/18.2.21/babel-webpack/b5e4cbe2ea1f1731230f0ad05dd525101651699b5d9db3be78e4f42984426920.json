{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.LISTS_KEY = 'listas';\n    this.CURRENT_LIST_KEY = 'listaAtual';\n    this.listsSubject = new BehaviorSubject(this.getLists());\n    this.currentListSubject = new BehaviorSubject(this.getCurrentList());\n    this.lists$ = this.listsSubject.asObservable();\n    this.currentList$ = this.currentListSubject.asObservable();\n  }\n  // Obter listas do localStorage\n  getLists() {\n    const lists = localStorage.getItem(this.LISTS_KEY);\n    return lists ? JSON.parse(lists) : {};\n  }\n  // Obter lista atual\n  getCurrentList() {\n    return localStorage.getItem(this.CURRENT_LIST_KEY);\n  }\n  // Salvar listas no localStorage\n  saveLists() {\n    const lists = this.listsSubject.value;\n    localStorage.setItem(this.LISTS_KEY, JSON.stringify(lists));\n    localStorage.setItem(this.CURRENT_LIST_KEY, this.currentListSubject.value || '');\n  }\n  // Adicionar nova lista\n  addList(name) {\n    if (!name.trim()) {\n      return {\n        success: false,\n        message: 'Digite o nome da lista!'\n      };\n    }\n    const lists = this.listsSubject.value;\n    if (lists[name]) {\n      return {\n        success: false,\n        message: 'Essa lista já existe!'\n      };\n    }\n    lists[name] = [];\n    this.listsSubject.next(lists);\n    this.currentListSubject.next(name);\n    this.saveLists();\n    return {\n      success: true,\n      message: 'Lista criada com sucesso!'\n    };\n  }\n  // Selecionar lista atual\n  selectList(name) {\n    this.currentListSubject.next(name);\n    this.saveLists();\n  }\n  // Adicionar tarefa à lista atual\n  addTask(task) {\n    const currentList = this.currentListSubject.value;\n    if (!currentList) {\n      return {\n        success: false,\n        message: 'Selecione ou crie uma lista primeiro!'\n      };\n    }\n    if (!task.trim()) {\n      return {\n        success: false,\n        message: 'Digite uma tarefa!'\n      };\n    }\n    const lists = this.listsSubject.value;\n    lists[currentList].push(task.trim());\n    this.listsSubject.next(lists);\n    this.saveLists();\n    return {\n      success: true,\n      message: 'Tarefa adicionada!'\n    };\n  }\n  // Editar tarefa\n  editTask(listName, index, newText) {\n    if (!newText.trim()) {\n      return {\n        success: false,\n        message: 'Digite uma tarefa!'\n      };\n    }\n    const lists = this.listsSubject.value;\n    if (lists[listName] && lists[listName][index] !== undefined) {\n      lists[listName][index] = newText.trim();\n      this.listsSubject.next(lists);\n      this.saveLists();\n      return {\n        success: true,\n        message: 'Tarefa editada!'\n      };\n    }\n    return {\n      success: false,\n      message: 'Erro ao editar tarefa!'\n    };\n  }\n  // Remover tarefa\n  removeTask(listName, index) {\n    const lists = this.listsSubject.value;\n    if (lists[listName] && lists[listName][index] !== undefined) {\n      lists[listName].splice(index, 1);\n      this.listsSubject.next(lists);\n      this.saveLists();\n    }\n  }\n  // Editar nome da lista\n  editListName(oldName, newName) {\n    if (!newName.trim()) {\n      return {\n        success: false,\n        message: 'Digite um nome para a lista!'\n      };\n    }\n    const lists = this.listsSubject.value;\n    if (lists[newName] && newName !== oldName) {\n      return {\n        success: false,\n        message: 'Já existe uma lista com esse nome!'\n      };\n    }\n    // Renomear lista\n    lists[newName] = lists[oldName];\n    delete lists[oldName];\n    // Atualizar lista atual se necessário\n    if (this.currentListSubject.value === oldName) {\n      this.currentListSubject.next(newName);\n    }\n    this.listsSubject.next(lists);\n    this.saveLists();\n    return {\n      success: true,\n      message: 'Lista renomeada!'\n    };\n  }\n  // Remover lista\n  removeList(name) {\n    const lists = this.listsSubject.value;\n    delete lists[name];\n    // Se era a lista atual, limpar seleção\n    if (this.currentListSubject.value === name) {\n      this.currentListSubject.next(null);\n    }\n    this.listsSubject.next(lists);\n    this.saveLists();\n  }\n  // Obter tarefas da lista atual\n  getCurrentListTasks() {\n    const currentList = this.currentListSubject.value;\n    const lists = this.listsSubject.value;\n    return currentList && lists[currentList] ? lists[currentList] : [];\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TaskService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","TaskService","constructor","LISTS_KEY","CURRENT_LIST_KEY","listsSubject","getLists","currentListSubject","getCurrentList","lists$","asObservable","currentList$","lists","localStorage","getItem","JSON","parse","saveLists","value","setItem","stringify","addList","name","trim","success","message","next","selectList","addTask","task","currentList","push","editTask","listName","index","newText","undefined","removeTask","splice","editListName","oldName","newName","removeList","getCurrentListTasks","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lidiomar Cidral\\Desktop\\to-do-list-main\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ListsData } from '../models/task.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n  private readonly LISTS_KEY = 'listas';\r\n  private readonly CURRENT_LIST_KEY = 'listaAtual';\r\n  \r\n  private listsSubject = new BehaviorSubject<ListsData>(this.getLists());\r\n  private currentListSubject = new BehaviorSubject<string | null>(this.getCurrentList());\r\n  \r\n  public lists$ = this.listsSubject.asObservable();\r\n  public currentList$ = this.currentListSubject.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  // Obter listas do localStorage\r\n  getLists(): ListsData {\r\n    const lists = localStorage.getItem(this.LISTS_KEY);\r\n    return lists ? JSON.parse(lists) : {};\r\n  }\r\n\r\n  // Obter lista atual\r\n  getCurrentList(): string | null {\r\n    return localStorage.getItem(this.CURRENT_LIST_KEY);\r\n  }\r\n\r\n  // Salvar listas no localStorage\r\n  private saveLists(): void {\r\n    const lists = this.listsSubject.value;\r\n    localStorage.setItem(this.LISTS_KEY, JSON.stringify(lists));\r\n    localStorage.setItem(this.CURRENT_LIST_KEY, this.currentListSubject.value || '');\r\n  }\r\n\r\n  // Adicionar nova lista\r\n  addList(name: string): { success: boolean; message: string } {\r\n    if (!name.trim()) {\r\n      return { success: false, message: 'Digite o nome da lista!' };\r\n    }\r\n\r\n    const lists = this.listsSubject.value;\r\n    if (lists[name]) {\r\n      return { success: false, message: 'Essa lista já existe!' };\r\n    }\r\n\r\n    lists[name] = [];\r\n    this.listsSubject.next(lists);\r\n    this.currentListSubject.next(name);\r\n    this.saveLists();\r\n\r\n    return { success: true, message: 'Lista criada com sucesso!' };\r\n  }\r\n\r\n  // Selecionar lista atual\r\n  selectList(name: string): void {\r\n    this.currentListSubject.next(name);\r\n    this.saveLists();\r\n  }\r\n\r\n  // Adicionar tarefa à lista atual\r\n  addTask(task: string): { success: boolean; message: string } {\r\n    const currentList = this.currentListSubject.value;\r\n    if (!currentList) {\r\n      return { success: false, message: 'Selecione ou crie uma lista primeiro!' };\r\n    }\r\n\r\n    if (!task.trim()) {\r\n      return { success: false, message: 'Digite uma tarefa!' };\r\n    }\r\n\r\n    const lists = this.listsSubject.value;\r\n    lists[currentList].push(task.trim());\r\n    this.listsSubject.next(lists);\r\n    this.saveLists();\r\n\r\n    return { success: true, message: 'Tarefa adicionada!' };\r\n  }\r\n\r\n  // Editar tarefa\r\n  editTask(listName: string, index: number, newText: string): { success: boolean; message: string } {\r\n    if (!newText.trim()) {\r\n      return { success: false, message: 'Digite uma tarefa!' };\r\n    }\r\n\r\n    const lists = this.listsSubject.value;\r\n    if (lists[listName] && lists[listName][index] !== undefined) {\r\n      lists[listName][index] = newText.trim();\r\n      this.listsSubject.next(lists);\r\n      this.saveLists();\r\n      return { success: true, message: 'Tarefa editada!' };\r\n    }\r\n\r\n    return { success: false, message: 'Erro ao editar tarefa!' };\r\n  }\r\n\r\n  // Remover tarefa\r\n  removeTask(listName: string, index: number): void {\r\n    const lists = this.listsSubject.value;\r\n    if (lists[listName] && lists[listName][index] !== undefined) {\r\n      lists[listName].splice(index, 1);\r\n      this.listsSubject.next(lists);\r\n      this.saveLists();\r\n    }\r\n  }\r\n\r\n  // Editar nome da lista\r\n  editListName(oldName: string, newName: string): { success: boolean; message: string } {\r\n    if (!newName.trim()) {\r\n      return { success: false, message: 'Digite um nome para a lista!' };\r\n    }\r\n\r\n    const lists = this.listsSubject.value;\r\n    if (lists[newName] && newName !== oldName) {\r\n      return { success: false, message: 'Já existe uma lista com esse nome!' };\r\n    }\r\n\r\n    // Renomear lista\r\n    lists[newName] = lists[oldName];\r\n    delete lists[oldName];\r\n\r\n    // Atualizar lista atual se necessário\r\n    if (this.currentListSubject.value === oldName) {\r\n      this.currentListSubject.next(newName);\r\n    }\r\n\r\n    this.listsSubject.next(lists);\r\n    this.saveLists();\r\n\r\n    return { success: true, message: 'Lista renomeada!' };\r\n  }\r\n\r\n  // Remover lista\r\n  removeList(name: string): void {\r\n    const lists = this.listsSubject.value;\r\n    delete lists[name];\r\n\r\n    // Se era a lista atual, limpar seleção\r\n    if (this.currentListSubject.value === name) {\r\n      this.currentListSubject.next(null);\r\n    }\r\n\r\n    this.listsSubject.next(lists);\r\n    this.saveLists();\r\n  }\r\n\r\n  // Obter tarefas da lista atual\r\n  getCurrentListTasks(): string[] {\r\n    const currentList = this.currentListSubject.value;\r\n    const lists = this.listsSubject.value;\r\n    return currentList && lists[currentList] ? lists[currentList] : [];\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}