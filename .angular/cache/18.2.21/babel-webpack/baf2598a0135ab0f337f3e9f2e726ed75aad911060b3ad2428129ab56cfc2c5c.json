{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this.USERS_KEY = 'usuarios';\n    this.LOGGED_USER_KEY = 'usuarioLogado';\n    this.loggedUserSubject = new BehaviorSubject(this.getLoggedUser());\n    this.loggedUser$ = this.loggedUserSubject.asObservable();\n  }\n  // Obter usuários do localStorage\n  getUsers() {\n    const users = localStorage.getItem(this.USERS_KEY);\n    return users ? JSON.parse(users) : [];\n  }\n  // Salvar usuários no localStorage\n  saveUsers(users) {\n    localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\n  }\n  // Registrar novo usuário\n  registerUser(userData) {\n    const users = this.getUsers();\n    // Validações\n    if (!userData.nome || !userData.email || !userData.senha || !userData.confirmarSenha) {\n      return {\n        success: false,\n        message: 'Preencha todos os campos!'\n      };\n    }\n    if (userData.senha !== userData.confirmarSenha) {\n      return {\n        success: false,\n        message: 'As senhas não conferem!'\n      };\n    }\n    if (!userData.aceiteLGPD) {\n      return {\n        success: false,\n        message: 'Você deve aceitar os termos da LGPD!'\n      };\n    }\n    if (users.some(u => u.email === userData.email)) {\n      return {\n        success: false,\n        message: 'Este e-mail já está registrado!'\n      };\n    }\n    // Adicionar usuário\n    const newUser = {\n      nome: userData.nome,\n      email: userData.email,\n      senha: userData.senha\n    };\n    users.push(newUser);\n    this.saveUsers(users);\n    return {\n      success: true,\n      message: 'Usuário registrado com sucesso!'\n    };\n  }\n  // Login do usuário\n  loginUser(credentials) {\n    if (!credentials.email || !credentials.senha) {\n      return {\n        success: false,\n        message: 'Preencha todos os campos!'\n      };\n    }\n    const users = this.getUsers();\n    const user = users.find(u => u.email === credentials.email && u.senha === credentials.senha);\n    if (!user) {\n      return {\n        success: false,\n        message: 'Email ou senha incorretos!'\n      };\n    }\n    // Armazenar usuário logado\n    localStorage.setItem(this.LOGGED_USER_KEY, JSON.stringify(user));\n    this.loggedUserSubject.next(user);\n    return {\n      success: true,\n      message: `Bem-vindo, ${user.nome}!`,\n      user\n    };\n  }\n  // Logout do usuário\n  logoutUser() {\n    localStorage.removeItem(this.LOGGED_USER_KEY);\n    this.loggedUserSubject.next(null);\n  }\n  // Obter usuário logado\n  getLoggedUser() {\n    const user = localStorage.getItem(this.LOGGED_USER_KEY);\n    return user ? JSON.parse(user) : null;\n  }\n  // Remover usuário\n  removeUser(index) {\n    const users = this.getUsers();\n    users.splice(index, 1);\n    this.saveUsers(users);\n  }\n  // Verificar se usuário está logado\n  isLoggedIn() {\n    return this.getLoggedUser() !== null;\n  }\n  static {\n    this.ɵfac = function UserService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","UserService","constructor","USERS_KEY","LOGGED_USER_KEY","loggedUserSubject","getLoggedUser","loggedUser$","asObservable","getUsers","users","localStorage","getItem","JSON","parse","saveUsers","setItem","stringify","registerUser","userData","nome","email","senha","confirmarSenha","success","message","aceiteLGPD","some","u","newUser","push","loginUser","credentials","user","find","next","logoutUser","removeItem","removeUser","index","splice","isLoggedIn","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Lidiomar Cidral\\Desktop\\to-do-list-main\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User, UserLogin, UserRegistration } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private readonly USERS_KEY = 'usuarios';\r\n  private readonly LOGGED_USER_KEY = 'usuarioLogado';\r\n  \r\n  private loggedUserSubject = new BehaviorSubject<User | null>(this.getLoggedUser());\r\n  public loggedUser$ = this.loggedUserSubject.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  // Obter usuários do localStorage\r\n  getUsers(): User[] {\r\n    const users = localStorage.getItem(this.USERS_KEY);\r\n    return users ? JSON.parse(users) : [];\r\n  }\r\n\r\n  // Salvar usuários no localStorage\r\n  private saveUsers(users: User[]): void {\r\n    localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\r\n  }\r\n\r\n  // Registrar novo usuário\r\n  registerUser(userData: UserRegistration): { success: boolean; message: string } {\r\n    const users = this.getUsers();\r\n    \r\n    // Validações\r\n    if (!userData.nome || !userData.email || !userData.senha || !userData.confirmarSenha) {\r\n      return { success: false, message: 'Preencha todos os campos!' };\r\n    }\r\n\r\n    if (userData.senha !== userData.confirmarSenha) {\r\n      return { success: false, message: 'As senhas não conferem!' };\r\n    }\r\n\r\n    if (!userData.aceiteLGPD) {\r\n      return { success: false, message: 'Você deve aceitar os termos da LGPD!' };\r\n    }\r\n\r\n    if (users.some(u => u.email === userData.email)) {\r\n      return { success: false, message: 'Este e-mail já está registrado!' };\r\n    }\r\n\r\n    // Adicionar usuário\r\n    const newUser: User = {\r\n      nome: userData.nome,\r\n      email: userData.email,\r\n      senha: userData.senha\r\n    };\r\n\r\n    users.push(newUser);\r\n    this.saveUsers(users);\r\n\r\n    return { success: true, message: 'Usuário registrado com sucesso!' };\r\n  }\r\n\r\n  // Login do usuário\r\n  loginUser(credentials: UserLogin): { success: boolean; message: string; user?: User } {\r\n    if (!credentials.email || !credentials.senha) {\r\n      return { success: false, message: 'Preencha todos os campos!' };\r\n    }\r\n\r\n    const users = this.getUsers();\r\n    const user = users.find(u => u.email === credentials.email && u.senha === credentials.senha);\r\n\r\n    if (!user) {\r\n      return { success: false, message: 'Email ou senha incorretos!' };\r\n    }\r\n\r\n    // Armazenar usuário logado\r\n    localStorage.setItem(this.LOGGED_USER_KEY, JSON.stringify(user));\r\n    this.loggedUserSubject.next(user);\r\n\r\n    return { success: true, message: `Bem-vindo, ${user.nome}!`, user };\r\n  }\r\n\r\n  // Logout do usuário\r\n  logoutUser(): void {\r\n    localStorage.removeItem(this.LOGGED_USER_KEY);\r\n    this.loggedUserSubject.next(null);\r\n  }\r\n\r\n  // Obter usuário logado\r\n  getLoggedUser(): User | null {\r\n    const user = localStorage.getItem(this.LOGGED_USER_KEY);\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n\r\n  // Remover usuário\r\n  removeUser(index: number): void {\r\n    const users = this.getUsers();\r\n    users.splice(index, 1);\r\n    this.saveUsers(users);\r\n  }\r\n\r\n  // Verificar se usuário está logado\r\n  isLoggedIn(): boolean {\r\n    return this.getLoggedUser() !== null;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}